generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model call_to_action {
  id          BigInt  @id @default(autoincrement())
  description String?
  post        post[]
}

model file {
  id                         Int                          @id @default(autoincrement())
  filename                   String                       @db.VarChar(255)
  filepath                   String                       @db.VarChar(255)
  extracted_imgs             Int[]
  content                    String?
  size_mb                    Int?
  user_id                    String?                      @db.VarChar(255)
  created_at                 DateTime?                    @default(now()) @db.Timestamp(6)
  image                      image[]
  industry_challenge_mapping industry_challenge_mapping[]
  model                      model[]
}

model image {
  id          Int       @id @default(autoincrement())
  source_file Int
  model_name  String?   @db.VarChar(255)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  filename    String
  pathname    String
  file        file      @relation(fields: [source_file], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model industry_challenge_mapping {
  id                BigInt   @id @default(autoincrement())
  industry_name     String
  discussion_topic  String?
  topic_description String?
  source_file_id    Int?
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  already_used      Boolean  @default(false)
  file              file?    @relation(fields: [source_file_id], references: [id], onUpdate: NoAction, map: "public_industry_challenge_mapping_source_file_id_fkey")
  post              post[]
}

model model {
  id              Int       @id @default(autoincrement())
  model_name      String?   @db.VarChar(255)
  spec_file       Int?
  category        String?   @db.VarChar(255)
  description_1   String?
  description_2   String?
  description_3   String?
  associated_imgs Int[]
  user_id         String?   @db.VarChar(255)
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  file            file?     @relation(fields: [spec_file], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model post {
  id                         BigInt                      @id @default(autoincrement())
  title                      String?
  content                    String?
  call_to_action_id          BigInt?
  created_at                 DateTime                    @default(now()) @db.Timestamptz(6)
  created_from_topic         BigInt?
  relevant_files             Int[]
  user_id                    String?
  created_from_theme         String?
  schedule_id                BigInt?
  approved                   Boolean?
  schedule_date              DateTime?                   @db.Timestamptz(6)
  featured_image_filename    String?
  generated_image_filenames  String[]
  call_to_action             call_to_action?             @relation(fields: [call_to_action_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  industry_challenge_mapping industry_challenge_mapping? @relation(fields: [created_from_topic], references: [id], onDelete: NoAction, onUpdate: NoAction)
  scheduler                  scheduler?                  @relation(fields: [schedule_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model scheduler {
  id                  BigInt    @id @default(autoincrement())
  created_at          DateTime  @default(now()) @db.Timestamptz(6)
  start_from          DateTime? @db.Timestamptz(6)
  end_on              DateTime? @db.Timestamptz(6)
  frequency_sun_start Boolean[] @default([false, false, false, false, false, false, false])
  title               String?
  theme_name          String?
  post                post[]
  themes              themes[]
}

model themes {
  id                  BigInt     @id @default(autoincrement())
  title               String
  description         String?
  audience_connection String?
  company_connection  String?
  created_at          DateTime   @default(now()) @db.Timestamptz(6)
  schedule            BigInt?
  scheduler           scheduler? @relation(fields: [schedule], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
